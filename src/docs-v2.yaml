openapi: 3.0.0
info:
  title: Eino
  description: Eino API docs
  version: 2.5.0
  license:
    name: MIT
    url: https://github.com/Jankku/eino-backend/blob/master/LICENSE.md
externalDocs:
  url: https://github.com/Jankku/eino-backend/
servers:
  - url: https://eino.jankku.fi/api/{version}
    variables:
      version:
        default: v2
    description: Production server
  - url: http://localhost:5000/api/{version}
    variables:
      version:
        default: v2
    description: Localhost
tags:
  - name: docs
    description: Documentation endpoints
  - name: admin
    description: Admin endpoints
  - name: auth
    description: Authentication endpoints
  - name: email
    description: Email endpoints
  - name: books
    description: Book endpoints
  - name: movies
    description: Movie endpoints
  - name: profile
    description: Profile endpoints
  - name: share
    description: Public profile share endpoints
  - name: profilepicture
    description: Public profile picture endpoints
paths:
  /docs.json:
    get:
      tags:
        - docs
      summary: Get API docs as JSON
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: {}
  /admin/audits:
    get:
      tags:
        - admin
      summary: Get all audit log entries
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /admin/users:
    get:
      tags:
        - admin
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /admin/users/{id}/enable:
    post:
      summary: Enable user account
      security:
        - BearerAuth: []
      tags:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /admin/users/{id}/disable:
    post:
      summary: Disable user account
      security:
        - BearerAuth: []
      tags:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /admin/users/{id}:
    put:
      summary: Edit user information
      security:
        - BearerAuth: []
      tags:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserRequest'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      summary: Delete user account
      security:
        - BearerAuth: []
      tags:
        - admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/register:
    post:
      tags:
        - auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
                password:
                  $ref: '#/components/schemas/Password'
                password2:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Login'
                - $ref: '#/components/schemas/LoginWithTwoFactor'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '422':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/login/config:
    post:
      tags:
        - auth
      summary: Get login config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  requireOtp:
                    type: boolean
        '422':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/refreshtoken:
    post:
      tags:
        - auth
      summary: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '422':
          description: JWT error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/passwordstrength:
    post:
      tags:
        - auth
      summary: Check password strength
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password strength check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordStrength'
        '500':
          description: Password strength check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/password/forgot:
    post:
      tags:
        - auth
      summary: Send reset password email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Reset password email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Failed to send reset password email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/password/reset:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ResetPassword'
                - $ref: '#/components/schemas/ResetPasswordWithTwoFactor'
      responses:
        '200':
          description: Password reseted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Failed to reset password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/2fa/generate:
    post:
      tags:
        - auth
      summary: Generate TOTP and QR code
      security:
        - BearerAuth: []
      responses:
        '200':
          description: TOTP url and QR code data URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFactorGenerateRequest'
        '500':
          description: Failed to generate TOTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/2fa/verify:
    post:
      tags:
        - auth
      summary: Verify TOTP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
                otp:
                  $ref: '#/components/schemas/OTP'
      responses:
        '200':
          description: TOTP verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Failed to verify TOTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/2fa/enable:
    post:
      tags:
        - auth
      summary: Enable two-factor verification
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  $ref: '#/components/schemas/OTP'
      responses:
        '200':
          description: Two-factor authentication enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Failed to enable Two-factor authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/2fa/disable:
    post:
      tags:
        - auth
      summary: Disable two-factor verification
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  $ref: '#/components/schemas/OTP'
      responses:
        '200':
          description: Two-factor authentication enabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '500':
          description: Failed to enable Two-factor authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /email/update:
    post:
      tags:
        - email
      summary: Update email
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Profile imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Failed to update email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /email/sendconfirmation:
    post:
      tags:
        - email
      summary: Send an confirmation email. Used to verify email
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Failed to send confirmation email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /email/verify:
    post:
      tags:
        - email
      summary: Verify email using one-time password (OTP) sent to email
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Failed to verify email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /profile:
    get:
      tags:
        - profile
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /profile/share:
    get:
      tags:
        - profile
      summary: Share user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        share_id:
                          type: string
  /profile/profilepicture:
    post:
      tags:
        - profile
      summary: Upload profile picture
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
            encoding:
              picture:
                contentType: image/*
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
  /profile/export:
    post:
      tags:
        - profile
      summary: Export profile data
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                includeAuditLog:
                  type: boolean
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportProfileResponse'
  /profile/import:
    post:
      tags:
        - profile
      summary: Import profile data
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportProfileResponse'
      responses:
        '200':
          description: Profile imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Item count exceeds the limit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /profile/deleteaccount:
    post:
      tags:
        - profile
      summary: Delete user account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Account successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: API error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/books/count:
    get:
      tags:
        - books
      summary: Get book count by status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    type: integer
                  reading:
                    type: integer
                  completed:
                    type: integer
                  on-hold:
                    type: integer
                  dropped:
                    type: integer
                  planned:
                    type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/books/{status}:
    get:
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [all, completed, reading, on-hold, dropped, planned]
        - name: sort
          in: query
          schema:
            type: string
            enum: [title, author, publisher, pages, year, status, score, start_date, end_date]
            default: title
        - name: order
          in: query
          schema:
            type: string
            enum: [ascending, descending]
            default: ascending
        - name: filter
          in: query
          schema:
            type: string
          description: "key:operator:value - 'score:>:5', 'status:=:completed', 'year:<:2020'"
      tags:
        - books
      summary: Get books by status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '401':
          description: Invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/books/book/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - books
      summary: Get book by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '401':
          description: Invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/books/search:
    get:
      tags:
        - books
      summary: Search books
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
  /list/books/images:
    get:
      tags:
        - books
      summary: Get book covers
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'
  /list/books/add:
    post:
      tags:
        - books
      summary: Add new book to the list
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '201':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/books/update/{id}:
    put:
      tags:
        - books
      summary: Update an existing book
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookRequest'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
  /list/books/delete/{id}:
    delete:
      tags:
        - books
      summary: Delete book
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
  /list/movies/count:
    get:
      tags:
        - movies
      summary: Get movie count by status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  all:
                    type: integer
                  watching:
                    type: integer
                  completed:
                    type: integer
                  on-hold:
                    type: integer
                  dropped:
                    type: integer
                  planned:
                    type: integer
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/movies/{status}:
    get:
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [all, completed, watching, on-hold, dropped, planned]
        - name: sort
          in: query
          schema:
            type: string
            enum:
              [title, studio, director, writer, duration, year, status, score, start_date, end_date]
            default: title
        - name: order
          in: query
          schema:
            type: string
            enum: [ascending, descending]
            default: ascending
        - name: filter
          in: query
          schema:
            type: string
          description: "key:operator:value - 'score:>:5', 'status:=:completed', 'year:<:2020'"
      tags:
        - movies
      summary: Get movies by status
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '401':
          description: Invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/movies/movie/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - movies
      summary: Get movie by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
        '401':
          description: Invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/movies/search:
    get:
      tags:
        - movies
      summary: Search movies
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
  /list/movies/images:
    get:
      tags:
        - movies
      summary: Get movie posters
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResult'
  /list/movies/add:
    post:
      tags:
        - movies
      summary: Add new movie to the list
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequest'
      responses:
        '201':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
        '422':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /list/movies/update/{id}:
    put:
      tags:
        - movies
      summary: Update an existing movie
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMovieRequest'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieResponse'
  /list/movies/delete/{id}:
    delete:
      tags:
        - movies
      summary: Delete movie
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
  /share/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      tags:
        - share
      summary: Get shared image by ID
      responses:
        '200':
          description: Successful response
          content:
            image/png:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /profilepicture/{fileName}.avif:
    get:
      parameters:
        - name: fileName
          in: path
          required: true
          schema:
            type: string
      tags:
        - profilepicture
      summary: Get profile picture by filename
      responses:
        '200':
          description: Successful response
          content:
            image/avif:
              schema:
                type: string
                format: binary
        '422':
          description: Couldn't get profile picture
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    Username:
      type: string
      minLength: 3
      maxLength: 255
    Password:
      type: string
      minLength: 8
      maxLength: 255
    Login:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
    LoginWithTwoFactor:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        twoFactorCode:
          $ref: '#/components/schemas/OTP'
    ResetPassword:
      type: object
      properties:
        email:
          type: string
        newPassword:
          $ref: '#/components/schemas/Password'
        otp:
          $ref: '#/components/schemas/OTP'
    ResetPasswordWithTwoFactor:
      type: object
      properties:
        email:
          type: string
        newPassword:
          $ref: '#/components/schemas/Password'
        otp:
          $ref: '#/components/schemas/OTP'
        twoFactorCode:
          $ref: '#/components/schemas/OTP'
    TwoFactorGenerateRequest:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              totpUrl:
                type: string
              qrCodeUrl:
                type: string
    AddBookRequest:
      type: object
      required:
        - isbn
        - title
        - author
        - publisher
        - pages
        - year
        - status
        - score
        - start_date
        - end_date
      properties:
        isbn:
          type: string
        title:
          type: string
        author:
          type: string
        publisher:
          type: string
        image_url:
          type: string
          format: uri
          default: 'https://example.com/image.jpg'
        pages:
          type: integer
        year:
          type: integer
        status:
          type: string
          enum: [completed, reading, on-hold, dropped, planned]
          default: reading
        score:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
    AddMovieRequest:
      type: object
      required:
        - title
        - studio
        - director
        - writer
        - duration
        - year
        - status
        - score
        - start_date
        - end_date
      properties:
        title:
          type: string
        studio:
          type: string
        director:
          type: string
        writer:
          type: string
        image_url:
          type: string
          format: uri
          default: 'https://example.com/image.jpg'
        duration:
          type: integer
        year:
          type: integer
        status:
          type: string
          enum: [completed, watching, on-hold, dropped, planned]
          default: watching
        score:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        book_id:
          type: string
          format: uuid
        isbn:
          type: string
        title:
          type: string
        author:
          type: string
        publisher:
          type: string
        image_url:
          type: string
          format: uri
        pages:
          type: integer
          minimum: 0
        year:
          type: integer
        status:
          type: string
          enum: [completed, reading, on-hold, dropped, planned]
        score:
          type: integer
          minimum: 0
          maximum: 10
        note:
          type: string
          nullable: true
        language_code:
          type: string
          description: ISO 369-1 language code
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        created_on:
          type: string
          format: date-time
    Movie:
      type: object
      properties:
        movie_id:
          type: string
          format: uuid
        title:
          type: string
        studio:
          type: string
        director:
          type: string
        writer:
          type: string
        image_url:
          type: string
          format: uri
        duration:
          type: integer
          minimum: 0
        year:
          type: integer
        status:
          type: string
          enum: [completed, watching, on-hold, dropped, planned]
        score:
          type: integer
          minimum: 0
          maximum: 10
        note:
          type: string
          nullable: true
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        created_on:
          type: string
          format: date-time
    BookResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    MovieResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
    ExportProfileResponse:
      type: object
      properties:
        version:
          type: integer
        profile:
          $ref: '#/components/schemas/Profile'
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        movies:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        shares:
          type: array
          items:
            $ref: '#/components/schemas/ProfileShare'
    Profile:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        email_verified_on:
          type: string
          format: date-time
        registration_date:
          type: string
          format: date-time
        totp_enabled_on:
          type: string
          format: date-time
        profile_picture_path:
          type: string
        stats:
          type: object
          properties:
            book:
              type: object
              properties:
                count:
                  $ref: '#/components/schemas/ProfileBookCount'
                pages_read:
                  type: integer
                score_average:
                  type: number
                score_distribution:
                  type: array
                  items:
                    type: object
                    properties:
                      score:
                        type: integer
                      count:
                        type: integer
            movie:
              type: object
              properties:
                count:
                  $ref: '#/components/schemas/ProfileMovieCount'
                watch_time:
                  type: integer
                score_average:
                  type: number
                score_distribution:
                  type: array
                  items:
                    type: object
                    properties:
                      score:
                        type: integer
                      count:
                        type: integer
    ProfileBookCount:
      type: object
      properties:
        all:
          type: integer
        reading:
          type: integer
        completed:
          type: integer
        on-hold:
          type: integer
        dropped:
          type: integer
        planned:
          type: integer
    ProfileMovieCount:
      type: object
      properties:
        all:
          type: integer
        watching:
          type: integer
        completed:
          type: integer
        on-hold:
          type: integer
        dropped:
          type: integer
        planned:
          type: integer
    ProfileShare:
      type: object
      properties:
        share_id:
          type: string
        created_on:
          type: string
          format: date-time
    ImageResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: string
            format: uri
    ApiResult:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              message:
                type: string
    ApiError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              message:
                type: string
    PasswordStrength:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              score:
                type: integer
                minimum: 0
                maximum: 4
              message:
                type: string
    OTP:
      type: string
      description: 6 digit One-time password. Used to login with 2FA and for email verification
      minLength: 6
      maxLength: 6
    AuditLogResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              username:
                type: string
              action:
                type: string
              table_name:
                type: string
                nullable: true
              record_id:
                type: string
                nullable: true
              old_data:
                type: object
                nullable: true
              new_data:
                type: object
                nullable: true
              created_on:
                type: string
                format: date-time
    EditUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          nullable: true
        email_verified_on:
          type: string
          format: date-time
          nullable: true
        role_id:
          type: number
          minimum: 1
        profile_picture_path:
          type: string
          nullable: true
        totp_enabled_on:
          type: string
          format: date-time
          nullable: true
    UsersResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              username:
                type: string
              role_id:
                type: number
              role:
                type: string
              profile_picture_path:
                type: string
                nullable: true
              email:
                type: string
                nullable: true
              email_verified_on:
                type: string
                format: date-time
                nullable: true
              disabled_on:
                type: string
                format: date-time
                nullable: true
              totp_enabled_on:
                type: string
                format: date-time
                nullable: true
              last_login_on:
                type: string
                format: date-time
                nullable: true
              created_on:
                type: string
                format: date-time
  requestBodies:
    Book:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authorization
